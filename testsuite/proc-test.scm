(test-begin "procs" 15)

(test-begin "arglists")
(import (kawa arglist))
(let ()
  (! a1 [10 11 12])
  (test-equal 3 (arglist-arg-count a1))
  (! a2 (arglist 2 k1: "K1" k2: "K2" @a1))
  (test-equal 6 (arglist-arg-count a2))
  (test-equal "k2" (arglist-key-ref a2 2))
  (test-equal "K2" (arglist-arg-ref a2 2))
  (test-equal 11 (arglist-arg-ref a2 4))
  (test-equal 2 (arglist-key-index a2 "k2"))
  (test-equal "K2" (arglist-key-value a2 "k2" "none"))
  (test-equal -1 (arglist-key-index a2 "k3"))
  (test-equal "none" (arglist-key-value a2 "k3" "none"))
  (let ((out (open-output-string)))
    (arglist-walk a2
                  (lambda (key arg)
                    (if key (format out "{~a: ~w}" key arg)
                        (format out "{~w}" arg))))
    (test-equal "{2}{k1: \"K1\"}{k2: \"K2\"}{10}{11}{12}"
                (get-output-string out)))
  )
(test-end "arglists")

(require 'hash-table)
(let ()
  (! hash1 (alist->hash-table (list (cons "k" 12))))
  (define (fun x #!key k) (cons k x))
  (test-equal '(12 . 11) (fun 11 k: 12))
  (test-equal '(12 . 13) (fun 13 @:hash1))
  (! hash2 (alist->hash-table (list (cons 'k: 42))))
  (test-equal '(42 . 10) (fun 10 @:hash2))
  (! alist1 (arglist 40 k: 43))
  (test-equal '(43 . 40) (fun @:alist1))
  (! alist2 (argvector 21 @:hash1))
  (test-equal '(12 . 21) (fun @:alist2))
  )            

(test-end)
